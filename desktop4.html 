<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CINET - Terminal de Segurança</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="scanline"></div>
    
    <div class="container">
        <div class="terminal-header">
            <div class="logo">
                <span class="glitch-text" data-text="CINET">CINET</span> // TERMINAL DE SEGURANÇA
            </div>
            <div class="status">
                <div class="status-item">
                    <div class="status-dot"></div>
                    <span>NÍVEL 4</span>
                </div>
                <div class="status-item">
                    <div class="status-dot"></div>
                    <span>CRIPTO ATIVO</span>
                </div>
                <div class="status-item">
                    <div class="status-dot"></div>
                    <span>REDE: CINET-01</span>
                </div>
            </div>
        </div>
        
        <div class="terminal">
            <div class="screen">
                <div class="output">
                    > INICIANDO MÓDULO DE AUTENTICAÇÃO...<br>
                    > VERIFICANDO PERMISSÕES...<br>
                    <span class="success">> NÍVEL DE ACESSO CONFIRMADO</span><br><br>
                    > RESOLVA O DESAFIO PARA VALIDAR ACESSO
                </div>
                
                <div class="puzzle-container">
                    <div class="puzzle-title">DESAFIO: LABIRINTO DE SEGURANÇA</div>
                    <div class="labirinto" id="maze"></div>
                    <div class="output">
                        > UTILIZE AS TECLAS DE DIREÇÃO PARA NAVEGAR ATÉ O DESTINO
                    </div>
                </div>
                
                <div class="puzzle-container" id="key-puzzle" style="display: none;">
                    <div class="puzzle-title">DESAFIO: COMBINAÇÃO DE TECLAS</div>
                    <div class="key-combination" id="key-combination">> PRESSIONE: Shift + K + 7</div>
                    <div class="key-grid" id="key-grid"></div>
                    <div class="output" id="key-result"></div>
                </div>
                
                <div id="puzzle-result" style="display: none;">
                    <div class="result-code">
                        > PUZZLE RESOLVIDO COM SUCESSO<br>
                        > CÓDIGO: <span id="puzzle-code">X7F2-Q9L8</span>
                    </div>
                    <div class="output">
                        > PRESSIONE ENTER PARA CONTINUAR...
                    </div>
                </div>
            </div>
        </div>
        
        <div class="terminal-footer">
            > CINET v3.7.2 // SISTEMA DE SEGURANÇA RESTRITO // TODAS AS AÇÕES MONITORADAS
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Estado do sistema
            const state = {
                mazeSolved: false,
                keyCombination: ['Shift', 'K', '7'],
                pressedKeys: []
            };
            
            // Elementos DOM
            const maze = document.getElementById('maze');
            const keyGrid = document.getElementById('key-grid');
            const keyCombination = document.getElementById('key-combination');
            const keyResult = document.getElementById('key-result');
            const puzzleResult = document.getElementById('puzzle-result');
            
            // Criar labirinto
            function createMaze() {
                // Um labirinto simples 10x10
                const mazeLayout = [
                    [1,1,1,1,1,1,1,1,1,1],
                    [1,0,0,0,1,0,0,0,0,1],
                    [1,1,1,0,1,0,1,1,0,1],
                    [1,0,0,0,0,0,1,0,0,1],
                    [1,0,1,1,1,1,1,0,1,1],
                    [1,0,0,0,0,0,0,0,0,1],
                    [1,1,1,1,1,0,1,1,0,1],
                    [1,0,0,0,0,0,1,0,0,1],
                    [1,0,1,1,1,1,1,0,1,1],
                    [1,1,1,1,1,1,1,2,1,1]
                ];
                
                maze.innerHTML = '';
                
                for (let row = 0; row < 10; row++) {
                    for (let col = 0; col < 10; col++) {
                        const cell = document.createElement('div');
                        cell.className = 'cell';
                        cell.dataset.row = row;
                        cell.dataset.col = col;
                        
                        if (mazeLayout[row][col] === 1) {
                            // Parede
                            cell.style.background = '#2a0a45';
                        } else if (mazeLayout[row][col] === 0) {
                            // Caminho
                            cell.classList.add('path');
                        } else if (mazeLayout[row][col] === 2) {
                            // Saída
                            cell.classList.add('end');
                        }
                        
                        if (row === 1 && col === 1) {
                            // Início
                            cell.classList.add('start');
                        }
                        
                        maze.appendChild(cell);
                    }
                }
                
                // Inicializar o jogador
                initMazePlayer();
            }
            
            // Inicializar o jogador no labirinto
            function initMazePlayer() {
                const startCell = document.querySelector('.cell.start');
                startCell.classList.add('player');
                state.playerPos = { row: 1, col: 1 };
            }
            
            // Mover o jogador no labirinto
            function movePlayer(direction) {
                const { row, col } = state.playerPos;
                let newRow = row;
                let newCol = col;
                
                switch(direction) {
                    case 'up': newRow--; break;
                    case 'down': newRow++; break;
                    case 'left': newCol--; break;
                    case 'right': newCol++; break;
                }
                
                // Verificar se o movimento é válido
                const newCell = document.querySelector(`.cell[data-row="${newRow}"][data-col="${newCol}"]`);
                if (newCell && !newCell.style.background) {
                    // Remover jogador da célula atual
                    document.querySelector('.cell.player').classList.remove('player');
                    
                    // Adicionar jogador à nova célula
                    newCell.classList.add('player');
                    state.playerPos = { row: newRow, col: newCol };
                    
                    // Verificar se chegou ao fim
                    if (newCell.classList.contains('end')) {
                        state.mazeSolved = true;
                        maze.style.display = 'none';
                        puzzleResult.style.display = 'block';
                        document.getElementById('puzzle-code').textContent = generateRandomCode();
                    }
                }
            }
            
            // Criar grid de teclas
            function createKeyGrid() {
                const keys = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Shift', 'Ctrl', 'Alt'];
                
                keyGrid.innerHTML = '';
                
                // Adicionar teclas ao grid
                keys.forEach(key => {
                    const keyBtn = document.createElement('div');
                    keyBtn.className = 'key-btn';
                    keyBtn.textContent = key;
                    keyBtn.dataset.key = key;
                    
                    keyBtn.addEventListener('click', () => {
                        keyBtn.classList.toggle('active');
                        
                        if (keyBtn.classList.contains('active')) {
                            if (!state.pressedKeys.includes(key)) {
                                state.pressedKeys.push(key);
                            }
                        } else {
                            state.pressedKeys = state.pressedKeys.filter(k => k !== key);
                        }
                        
                        checkKeyCombination();
                    });
                    
                    keyGrid.appendChild(keyBtn);
                });
            }
            
            // Verificar combinação de teclas
            function checkKeyCombination() {
                // Ordenar para comparar independente da ordem
                const pressedSorted = [...state.pressedKeys].sort();
                const comboSorted = [...state.keyCombination].sort();
                
                // Verificar se as arrays são iguais
                const isMatch = pressedSorted.length === comboSorted.length && 
                    pressedSorted.every((value, index) => value === comboSorted[index]);
                
                if (isMatch) {
                    keyResult.innerHTML = '<span class="success">> COMBINAÇÃO CORRETA!</span>';
                    setTimeout(() => {
                        puzzleResult.style.display = 'block';
                        document.getElementById('puzzle-code').textContent = generateRandomCode();
                    }, 1000);
                }
            }
            
            // Gerar código aleatório (formato XXXX-XXXX)
            function generateRandomCode() {
                const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
                let code = '';
                
                for (let i = 0; i < 4; i++) {
                    code += chars.charAt(Math.floor(Math.random() * chars.length));
                }
                
                return code;
            }
            
            // Escolher tipo de puzzle aleatoriamente
            function choosePuzzleType() {
                if (Math.random() > 0.5) {
                    maze.style.display = 'grid';
                    document.getElementById('key-puzzle').style.display = 'none';
                    createMaze();
                } else {
                    maze.style.display = 'none';
                    document.getElementById('key-puzzle').style.display = 'block';
                    state.pressedKeys = [];
                    createKeyGrid();
                    keyResult.textContent = '';
                    
                    // Gerar nova combinação de teclas
                    const keys = ['Shift', 'Ctrl', 'Alt', 'A', 'K', '7', '9', 'X', 'F'];
                    const combo = [];
                    for (let i = 0; i < 3; i++) {
                        const randomKey = keys[Math.floor(Math.random() * keys.length)];
                        if (!combo.includes(randomKey)) {
                            combo.push(randomKey);
                        }
                    }
                    state.keyCombination = combo;
                    keyCombination.textContent = `> PRESSIONE: ${combo.join(' + ')}`;
                }
            }
            
            // Eventos de teclado
            document.addEventListener('keydown', (e) => {
                if (state.mazeSolved) {
                    if (e.key === 'Enter') {
                        window.location.href = 'desktop7.html';
                    }
                    return;
                }
                
                if (document.getElementById('key-puzzle').style.display === 'block') {
                    return;
                }
                
                switch(e.key) {
                    case 'ArrowUp':
                        e.preventDefault();
                        movePlayer('up');
                        break;
                    case 'ArrowDown':
                        e.preventDefault();
                        movePlayer('down');
                        break;
                    case 'ArrowLeft':
                        e.preventDefault();
                        movePlayer('left');
                        break;
                    case 'ArrowRight':
                        e.preventDefault();
                        movePlayer('right');
                        break;
                }
            });
            
            // Inicializar puzzle
            choosePuzzleType();
        });
    </script>
</body>
</html>